{"version":3,"sources":["utils.ts","CheckOutRow.tsx","matrixReducer.ts","AvailableRooms.tsx","DistanceSlider.tsx","MarriottMatrix.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["formatDate","date","moment","format","DEFAULT_HOTELS","CheckOutRow","props","react_default","a","createElement","checkInDates","map","checkIn","grid","checkOut","pricePoint","get","datesToKey","key","onClick","onMouseEnter","onHover","onMouseLeave","offHover","className","classNames","activeCheckIn","getColorClass","shouldTint","concat","pricePerNight","getPricePercentile","percentile","matrixReducer","state","action","type","Object","objectSpread","distanceRange","range","selectedSquare","square","hoveredSquare","undefined","hotels","hotel","selected","name","Error","AvailableRooms","useMemo","byName","Map","pricePoints","forEach","currentBest","hotelName","cheapestRate","set","corporateRate","Array","from","values","sort","b","htmlTable","price","DistanceSlider","rangeSlider","assign","min","max","labelRenderer","label","toLocaleString","labelStepSize","stepSize","dates","sortDates","MarriottMatrix","_useReducer","useReducer","selectedHotelNames","Set","has","add","push","distance","includes","ImmutableList","createInitialState","_useReducer2","slicedToArray","dispatch","bucketedHotels","size","buckets","hotelIsWithinSelectedDistance","length","ceiling","Math","ceil","items","nameToHotel","anyHotelsSelected","some","useEffect","priceGrid","checkOutDates","soldOut","objectWithoutProperties","hotelForPricePoint","hotelIsFilteredTo","dateString","bestPriceForStay","closestHotel","DistanceSlider_DistanceSlider","value","onChange","bucket","react","controls","checked","renderFilters","bordered","condensed","CheckOutRow_CheckOutRow","shouldTintSquare","onSelectSquare","getActiveCheckIn","onHoverSquare","onUnhoverSquare","renderTable","Fragment","divider","AvailableRooms_AvailableRooms","_ref","_ref2","reduce","all","getPricePointsForStay","thisSquare","numMoreExpensive","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","err","return","console","log","processScrapedPricePoint","corporate_rate","price_per_night","sold_out","App","MarriottMatrix_MarriottMatrix","prices","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.742339a0.chunk.js","sourcesContent":["import moment from \"moment\";\n\nexport function formatDate(date: string | undefined) {\n  return date && moment(date).format(\"ddd M/D\");\n}\n\nexport const DEFAULT_HOTELS = [\n  \"The Ritz-Carlton Georgetown, Washington, D.C.\",\n  \"The Westin Georgetown, Washington D.C.\",\n  \"Washington Marriott Georgetown\",\n  \"The Ritz-Carlton, Washington, DC\",\n  \"The Mayflower Hotel, Autograph Collection\",\n  \"The Westin Georgetown, Washington D.C.\"\n];\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport { datesToKey } from \"./MarriottMatrix\";\nimport \"./CheckOutRow.scss\";\nimport { PriceGrid } from \"./types\";\nimport { formatDate } from \"./utils\";\n\ninterface Props {\n  checkInDates: string[];\n  checkOut?: string;\n  grid?: PriceGrid;\n  activeCheckIn?: string;\n  shouldTint: (checkIn: string) => boolean;\n  onClick?: (checkIn: string) => void;\n  getPricePercentile?: (checkIn: string) => number;\n  onHover?: (checkIn: string) => void;\n  offHover?: (checkIn: string) => void;\n}\n\nexport const CheckOutRow: React.FC<Props> = (props: Props) => {\n  return (\n    <tr>\n      {props.checkInDates.map(checkIn => {\n        if (props.grid && props.checkOut) {\n          const pricePoint = props.grid.get(\n            datesToKey({ checkOut: props.checkOut, checkIn })\n          );\n          return (\n            <td\n              key={checkIn}\n              onClick={\n                pricePoint && (() => props.onClick && props.onClick(checkIn))\n              }\n              onMouseEnter={() => props.onHover && props.onHover(checkIn)}\n              onMouseLeave={() => props.offHover && props.offHover(checkIn)}\n              className={classNames(\n                pricePoint && \"clickable\",\n                props.activeCheckIn === checkIn && \"active\",\n                getColorClass(checkIn),\n                props.shouldTint(checkIn) && \"tint\"\n              )}\n            >\n              <p>{pricePoint && `$${pricePoint.pricePerNight}`}</p>\n            </td>\n          );\n        } else {\n          return (\n            <th\n              key={checkIn}\n              className={classNames(\n                \"checkin-date\",\n                props.shouldTint(checkIn) && \"tint\"\n              )}\n            >\n              <p>{formatDate(checkIn)}</p>\n            </th>\n          );\n        }\n      })}\n      <th>\n        <p>{formatDate(props.checkOut)}</p>\n      </th>\n    </tr>\n  );\n\n  function getColorClass(checkOut: string) {\n    if (!props.getPricePercentile) {\n      return;\n    }\n    const percentile = props.getPricePercentile(checkOut);\n    if (percentile >= 0.9) {\n      return \"cost-1\";\n    } else if (percentile > 0.7) {\n      return \"cost-2\";\n    } else if (percentile > 0.3) {\n      return \"cost-3\";\n    } else if (percentile > 0.1) {\n      return \"cost-4\";\n    } else {\n      return \"cost-5\";\n    }\n  }\n};\n","import { List as ImmutableList } from \"immutable\";\nimport { GridInfo, Hotel } from \"./types\";\nimport { NumberRange } from \"@blueprintjs/core\";\n\nexport interface State {\n  grid?: GridInfo;\n  hotels: ImmutableList<Hotel>;\n  distanceRange: NumberRange;\n  selectedSquare?: [string, string];\n  hoveredSquare?: [string, string];\n}\n\nexport interface LoadPricesAction {\n  type: \"LOAD_PRICES\";\n  grid: GridInfo;\n}\n\nexport interface ToggleHotelSelection {\n  type: \"TOGGLE_HOTEL_SELECTION\";\n  hotel: Hotel;\n}\n\nexport interface UpdateDistanceRangeAction {\n  type: \"UPDATE_DISTANCE_RANGE\";\n  range: NumberRange;\n}\n\nexport interface SelectSquareAction {\n  type: \"SELECT_SQUARE\";\n  square: [string, string];\n}\n\nexport interface HoverOverSquareAction {\n  type: \"HOVER_OVER_SQUARE\";\n  square: [string, string];\n}\n\nexport interface UnhoverOverSquareAction {\n  type: \"UNHOVER_OVER_SQUARE\";\n}\n\nexport type Action =\n  | LoadPricesAction\n  | UpdateDistanceRangeAction\n  | SelectSquareAction\n  | HoverOverSquareAction\n  | UnhoverOverSquareAction\n  | ToggleHotelSelection;\n\nexport function matrixReducer(state: State, action: Action) {\n  switch (action.type) {\n    case \"LOAD_PRICES\":\n      return {\n        ...state,\n        grid: action.grid\n      };\n    case \"UPDATE_DISTANCE_RANGE\":\n      return {\n        ...state,\n        distanceRange: action.range\n      };\n    case \"SELECT_SQUARE\":\n      return {\n        ...state,\n        selectedSquare: action.square\n      };\n    case \"HOVER_OVER_SQUARE\":\n      return {\n        ...state,\n        hoveredSquare: action.square\n      };\n    case \"UNHOVER_OVER_SQUARE\":\n      return {\n        ...state,\n        hoveredSquare: undefined\n      };\n    case \"TOGGLE_HOTEL_SELECTION\":\n      return {\n        ...state,\n        hotels: state.hotels.map(hotel => ({\n          ...hotel,\n          selected:\n            hotel.name === action.hotel.name ? !hotel.selected : hotel.selected\n        }))\n      };\n    default:\n      throw new Error(\"Unknown action dispatched\");\n  }\n}\n","import React, { useMemo } from \"react\";\nimport { PricePointWithPrice } from \"./types\";\nimport \"./AvailableRooms.scss\";\nimport { HTMLTable } from \"@blueprintjs/core\";\n\ninterface Props {\n  dates: [string, string];\n  pricePoints: PricePointWithPrice[];\n}\n\ninterface HotelPrice {\n  hotelName: string;\n  cheapestRate?: number;\n  corporateRate: boolean;\n}\n\nfunction getRate(price: HotelPrice) {\n  if (price.cheapestRate === null) {\n    return \"No Rate Available\";\n  }\n  return `$${price.cheapestRate} (${\n    price.corporateRate ? \"Corporate Rate\" : \"Regular Rate\"\n  })`;\n}\n\nexport const AvailableRooms: React.FC<Props> = (props: Props) => {\n  const hotels = useMemo(() => {\n    const byName = new Map<string, HotelPrice>();\n    props.pricePoints.forEach(pricePoint => {\n      const currentBest = byName.get(pricePoint.hotelName);\n      if (\n        currentBest === undefined ||\n        currentBest.cheapestRate === undefined ||\n        (pricePoint.pricePerNight !== undefined &&\n          pricePoint.pricePerNight < currentBest.cheapestRate)\n      ) {\n        byName.set(pricePoint.hotelName, {\n          hotelName: pricePoint.hotelName,\n          cheapestRate: pricePoint.pricePerNight,\n          corporateRate: pricePoint.corporateRate\n        });\n      }\n    });\n    return Array.from(byName.values()).sort((a, b) => {\n      if (a.cheapestRate === null || a.cheapestRate === undefined) {\n        return 1;\n      } else if (b.cheapestRate === null || b.cheapestRate === undefined) {\n        return -1;\n      }\n      return a.cheapestRate - b.cheapestRate;\n    });\n  }, [props]);\n\n  return (\n    <div className=\"available-rooms\">\n      <HTMLTable>\n        {hotels.map(hotel => (\n          <tr>\n            <th>{hotel.hotelName}</th>\n            <td>{getRate(hotel)}</td>\n          </tr>\n        ))}\n      </HTMLTable>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { NumberRange, RangeSlider } from \"@blueprintjs/core\";\nimport \"./DistanceSlider.scss\";\n\ninterface Props {\n  value: NumberRange;\n  onChange: (range: NumberRange) => void;\n  min: number;\n}\n\nexport const DistanceSlider: React.FC<Props> = (props: Props) => {\n  return (\n    <div className=\"distance-slider-container\">\n      <RangeSlider\n        className=\"distance-slider\"\n        min={props.min}\n        max={5}\n        labelRenderer={label => (\n          <span className=\"no-wrap\">{label.toLocaleString() + \" miles\"}</span>\n        )}\n        labelStepSize={1}\n        stepSize={0.05}\n        {...props}\n      />\n    </div>\n  );\n};\n","import React, { useEffect, useReducer, useMemo, Fragment } from \"react\";\nimport { HTMLTable, Divider, Checkbox } from \"@blueprintjs/core\";\nimport { CheckOutRow } from \"./CheckOutRow\";\nimport \"./MarriottMatrix.scss\";\nimport {\n  PricePoint,\n  PriceGrid,\n  Bucket,\n  Hotel,\n  PricePointWithPrice\n} from \"./types\";\nimport { List as ImmutableList } from \"immutable\";\nimport { matrixReducer, State } from \"./matrixReducer\";\nimport { AvailableRooms } from \"./AvailableRooms\";\nimport { DistanceSlider } from \"./DistanceSlider\";\nimport { DEFAULT_HOTELS } from \"./utils\";\n\nexport function datesToKey(\n  dates: Pick<PricePoint, \"checkIn\" | \"checkOut\">\n): string {\n  return `${dates.checkIn}-${dates.checkOut}`;\n}\n\nfunction sortDates(dates: Set<string>): string[] {\n  return Array.from(dates).sort();\n}\n\ninterface Props {\n  pricePoints: PricePoint[];\n}\n\nfunction createInitialState(props: Props): State {\n  const selectedHotelNames = new Set<string>();\n  const hotels: Hotel[] = [];\n  props.pricePoints.forEach(pricePoint => {\n    const name = pricePoint.hotelName;\n    if (!selectedHotelNames.has(name)) {\n      selectedHotelNames.add(name);\n      hotels.push({\n        name: name,\n        distance: pricePoint.distance,\n        selected: DEFAULT_HOTELS.includes(name)\n      });\n    }\n  });\n\n  hotels.sort((a, b) => a.distance - b.distance);\n\n  return {\n    hotels: ImmutableList(hotels),\n    distanceRange: [0, 1.4]\n  };\n}\n\nexport const MarriottMatrix: React.FC<Props> = (props: Props) => {\n  const [state, dispatch] = useReducer(\n    matrixReducer,\n    createInitialState(props)\n  );\n\n  const bucketedHotels = useMemo(() => {\n    const hotels = state.hotels;\n    if (hotels.size === 0) {\n      return [];\n    }\n    const buckets: Bucket<Hotel>[] = [];\n    hotels.forEach(hotel => {\n      if (!hotelIsWithinSelectedDistance(hotel)) {\n        // return;\n      }\n      if (\n        buckets.length === 0 ||\n        hotel.distance > buckets[buckets.length - 1].ceiling\n      ) {\n        buckets.push({\n          ceiling: Math.ceil(hotel.distance),\n          items: [hotel]\n        });\n      } else {\n        buckets[buckets.length - 1].items.push(hotel);\n      }\n    });\n    return buckets;\n  }, [state.hotels, state.distanceRange]);\n\n  const nameToHotel = useMemo(() => {\n    const map = new Map<string, Hotel>();\n    state.hotels.forEach(hotel => {\n      map.set(hotel.name, hotel);\n    });\n    return map;\n  }, [state.hotels]);\n\n  const anyHotelsSelected = useMemo(() => {\n    return state.hotels.some(hotel => hotel.selected);\n  }, [state.hotels]);\n\n  useEffect(() => {\n    const priceGrid: PriceGrid = new Map();\n    const checkInDates = new Set<string>();\n    const checkOutDates = new Set<string>();\n\n    props.pricePoints.forEach(pricePoint => {\n      const {\n        hotelName,\n        pricePerNight,\n        soldOut,\n        corporateRate,\n        distance,\n        ...dates\n      } = pricePoint;\n\n      if (pricePerNight === null || pricePerNight === undefined || soldOut) {\n        return;\n      }\n\n      const hotelForPricePoint = nameToHotel.get(hotelName);\n      if (\n        !hotelForPricePoint ||\n        !hotelIsFilteredTo(hotelForPricePoint) ||\n        !hotelIsWithinSelectedDistance(hotelForPricePoint)\n      ) {\n        return;\n      }\n\n      const dateString = datesToKey(dates);\n      const bestPriceForStay = priceGrid.get(dateString);\n      if (!bestPriceForStay || pricePerNight < bestPriceForStay.pricePerNight) {\n        checkInDates.add(dates.checkIn);\n        checkOutDates.add(dates.checkOut);\n        priceGrid.set(dateString, {\n          ...pricePoint,\n          pricePerNight: pricePerNight\n        });\n      }\n    });\n\n    dispatch({\n      type: \"LOAD_PRICES\",\n      grid: {\n        grid: priceGrid,\n        checkInDates: sortDates(checkInDates),\n        checkOutDates: sortDates(checkOutDates)\n      }\n    });\n  }, [props.pricePoints, state.hotels, state.distanceRange]);\n\n  return (\n    <div className=\"container\">\n      <div className=\"sidebar\">{renderFilters()}</div>\n      <div className=\"content\">\n        {renderTable()}\n        {state.selectedSquare && (\n          <>\n            <Divider />\n            <AvailableRooms\n              dates={state.selectedSquare}\n              pricePoints={getPricePointsForStay(state.selectedSquare)}\n            />\n          </>\n        )}\n      </div>\n    </div>\n  );\n\n  function renderFilters() {\n    const closestHotel = state.hotels.get(0);\n    const min = closestHotel ? closestHotel.distance : 0;\n    return (\n      <div className=\"filters\">\n        <DistanceSlider\n          min={min}\n          value={[\n            Math.max(min, state.distanceRange[0]),\n            state.distanceRange[1]\n          ]}\n          onChange={range =>\n            dispatch({\n              type: \"UPDATE_DISTANCE_RANGE\",\n              range\n            })\n          }\n        />\n        <div className=\"hotels\">\n          {bucketedHotels.map(bucket => (\n            <Fragment key={`${bucket.ceiling}`}>\n              <h3>{`Under ${bucket.ceiling} ${\n                bucket.ceiling === 1 ? \"mile\" : \"miles\"\n              } away`}</h3>\n              {bucket.items.map(hotel => (\n                <Checkbox\n                  checked={hotel.selected}\n                  onChange={() =>\n                    dispatch({\n                      type: \"TOGGLE_HOTEL_SELECTION\",\n                      hotel: hotel\n                    })\n                  }\n                  key={hotel.name}\n                  label={hotel.name}\n                />\n              ))}\n            </Fragment>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  function renderTable() {\n    if (!state.grid) {\n      return null;\n    }\n    return (\n      <div className=\"table-container\">\n        <HTMLTable bordered condensed>\n          <thead>\n            <CheckOutRow\n              checkInDates={state.grid.checkInDates}\n              shouldTint={shouldTintSquare()}\n            />\n          </thead>\n          <tbody>\n            {state.grid.checkOutDates.map(checkOut =>\n              state.grid ? (\n                <CheckOutRow\n                  key={checkOut}\n                  checkOut={checkOut}\n                  checkInDates={state.grid.checkInDates}\n                  grid={state.grid.grid}\n                  onClick={onSelectSquare(checkOut)}\n                  activeCheckIn={getActiveCheckIn(checkOut)}\n                  getPricePercentile={getPricePercentile(checkOut)}\n                  shouldTint={shouldTintSquare(checkOut)}\n                  onHover={onHoverSquare(checkOut)}\n                  offHover={onUnhoverSquare(checkOut)}\n                />\n              ) : null\n            )}\n          </tbody>\n        </HTMLTable>\n      </div>\n    );\n  }\n\n  function hotelIsFilteredTo(hotel: Hotel): boolean {\n    return !anyHotelsSelected || hotel.selected;\n  }\n\n  function onSelectSquare(checkOut: string) {\n    return (checkIn: string) => {\n      dispatch({\n        type: \"SELECT_SQUARE\",\n        square: [checkIn, checkOut]\n      });\n    };\n  }\n\n  function onHoverSquare(checkOut: string) {\n    return (checkIn: string) => {\n      dispatch({\n        type: \"HOVER_OVER_SQUARE\",\n        square: [checkIn, checkOut]\n      });\n    };\n  }\n\n  function onUnhoverSquare(checkOut: string) {\n    return (checkIn: string) => {\n      dispatch({\n        type: \"UNHOVER_OVER_SQUARE\"\n      });\n    };\n  }\n\n  function shouldTintSquare(checkOut?: string) {\n    return (checkIn: string) => {\n      if (!state.hoveredSquare) {\n        return false;\n      }\n      if (state.hoveredSquare[0] === checkIn) {\n        return checkOut === undefined || state.hoveredSquare[1] >= checkOut;\n      }\n      if (state.hoveredSquare[1] === checkOut) {\n        return state.hoveredSquare[0] <= checkIn;\n      }\n      return false;\n    };\n  }\n\n  function getActiveCheckIn(checkOut: string) {\n    if (!state.selectedSquare) {\n      return;\n    }\n    if (checkOut === state.selectedSquare[1]) {\n      return state.selectedSquare[0];\n    }\n  }\n\n  function getPricePercentile(checkOut: string) {\n    return (checkIn: string) => {\n      if (!state.grid) {\n        return -1;\n      }\n      const thisSquare = state.grid.grid.get(datesToKey({ checkIn, checkOut }));\n      if (thisSquare === undefined) {\n        return 0.5;\n      }\n\n      let numMoreExpensive = 0;\n      for (const otherValue of state.grid.grid.values()) {\n        if (otherValue.pricePerNight > thisSquare.pricePerNight) {\n          numMoreExpensive += 1;\n        }\n      }\n\n      console.log(numMoreExpensive, state.grid.grid.size);\n\n      return 1 - numMoreExpensive / state.grid.grid.size;\n    };\n  }\n\n  function hotelIsWithinSelectedDistance(hotel: Hotel) {\n    return (\n      hotel.distance >= state.distanceRange[0] &&\n      hotel.distance <= state.distanceRange[1]\n    );\n  }\n\n  function getPricePointsForStay([checkIn, checkOut]: [\n    string,\n    string\n  ]): PricePointWithPrice[] {\n    if (!state.grid) {\n      return [];\n    }\n    return props.pricePoints.reduce<PricePointWithPrice[]>(\n      (all, pricePoint) => {\n        const hotel = nameToHotel.get(pricePoint.hotelName);\n        if (\n          hotel &&\n          hotelIsFilteredTo(hotel) &&\n          pricePoint.checkIn === checkIn &&\n          pricePoint.checkOut === checkOut &&\n          pricePoint.pricePerNight !== undefined &&\n          pricePoint.pricePerNight !== null\n        ) {\n          all.push({\n            ...pricePoint,\n            pricePerNight: pricePoint.pricePerNight\n          });\n        }\n        return all;\n      },\n      []\n    );\n  }\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport { MarriottMatrix } from \"./MarriottMatrix\";\nimport prices from \"./prices.json\";\nimport { ScrapedPricePoint, PricePoint } from \"./types\";\n\nfunction processScrapedPricePoint(pricePoint: ScrapedPricePoint): PricePoint {\n  return {\n    hotelName: pricePoint.name,\n    checkIn: pricePoint.dates[0],\n    checkOut: pricePoint.dates[1],\n    corporateRate: pricePoint.corporate_rate,\n    pricePerNight: pricePoint.price_per_night,\n    soldOut: pricePoint.sold_out,\n    distance: pricePoint.distance\n  };\n}\n\nconst App: React.FC = () => {\n  return <MarriottMatrix pricePoints={prices.map(processScrapedPricePoint)} />;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}