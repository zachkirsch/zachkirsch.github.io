{"version":3,"sources":["AvailableRooms.tsx","utils.tsx","CheckOutRow.tsx","PriceGrid.tsx","matrixReducer.ts","Slider.tsx","Filters.tsx","MarriottMatrix.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AvailableRooms","props","hotels","useMemo","byName","Map","pricePoints","forEach","pricePoint","currentBest","get","hotelName","undefined","cheapestRate","pricePerNight","set","corporateRate","bookingLink","Array","from","values","sort","a","b","react_default","createElement","dialog","className","classNames","Classes","DARK","isOpen","visible","title","onClose","selectedSquare","dates","checkIn","checkOut","map","d","moment","format","renderTitle","htmlTable","interactive","hotel","key","onClick","openBookingLink","price","concat","window","open","formatDate","date","dayOfWeek","DEFAULT_HOTELS","datesToKey","stay","getStayLength","diff","pricePointIsWithinStayLengthRange","stayLengthRange","length","hotelIsWithinDistance","distanceRange","distance","datesAreChronological","first","second","dateIsInRange","dateStr","range","stringToDate","getPriceFromGrid","grid","PricePointMap","_Map","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","value","prototype","call","list","Error","push","wrapNativeSuper","toDate","CheckOutRow","checkInDates","getPrice","onClickCell","onMouseEnter","onHover","onMouseLeave","offHover","clickable","active","activeCheckIn","tint","shouldTint","getColorClass","renderDate","_formatDate","Fragment","getPricePercentile","percentile","TINT_AFTER_CLICKED","PriceGrid","_useState","useState","_useState2","slicedToArray","setSelectedSquare","_useState3","_useState4","hoveredSquare","setHoveredSquare","useBlueprintTable","table","defaultColumnWidth","enableRowResizing","enableColumnResizing","enableMultipleSelection","loadingOptions","TableLoadingOption","CELLS","COLUMN_HEADERS","ROW_HEADERS","renderMode","RenderMode","BATCH","rowHeaderCellRenderer","rowIndex","rowHeaderCell","numRows","defaultRowHeight","column","checkOutDates","name","cellRenderer","renderColumns","bordered","condensed","CheckOutRow_CheckOutRow","onSelectSquare","getActiveCheckIn","shouldTintSquare","onHoverSquare","priceStr","toLocaleString","cell","stayOverlaps","selected","overlapper","overlapsSelected","thisSquare","rank","size","matrixReducer","state","action","type","objectSpread","byDates","pricePointsByDates","square","Slider","localValue","setLocalValue","labelSuffix","spreadableProps","objectWithoutProperties","rangeSlider","assign","labelRenderer","label","labelStepSize","stepSize","onChange","onRelease","Filters","Slider_Slider","min","max","maxDistance","selectedDistanceRange","onChangeDistanceRange","selectedStayLengthRange","maxStayLength","onChangeStayLengthRange","dateRangeInput","shortcuts","toDateString","parseDate","minDate","dateRange","maxDate","onChangeDateRange","bucketedHotels","bucket","react","ceiling","items","outOfRange","tooltip","content","disabled","controls","checked","onChangeHotelSelection","sortDates","MarriottMatrix","viewingAvailableRooms","setViewingAvailableRooms","_useReducer","useReducer","hotelToPricePoints","selectedHotelNames","Set","addPricePoint","has","add","includes","byHotel","ImmutableList","createInitialState","_useReducer2","dispatch","_useMemo","buckets","nameToHotel","anyHotelsSelected","array","Math","ceil","_useMemo2","useCallback","_useMemo3","stayDates","_pricePoint$stayDates","stayLength","_useMemo4","last","setDistanceRange","_useState5","_useState6","setDateRange","_useState7","_useState8","setStayLengthRange","useEffect","datesToPricePoints","priceGridMap","addPricePointToGrid","soldOut","_pricePoint$stayDates2","_i","_arr","pricePointWithPrice","datesString","bestPriceForStay","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","entries","Symbol","iterator","next","done","_ref3","_ref2","hotelForPricePoint","err","return","sortedPrices","toConsumableArray","_ref4","_ref5","_ref6","_ref7","mapWithRanks","_ref8","i","_ref9","dateString","Filters_Filters","renderFilters","PriceGrid_PriceGrid","renderTable","AvailableRooms_AvailableRooms","getPricePointsForStay","processScrapedPricePoint","_pricePoint$dates","booking_link","propertyCodeMatch","match","corporate_rate","price_per_night","sold_out","App","innerWidth","width","setWidth","handleResize","addEventListener","removeEventListener","useWindowWidth","MarriottMatrix_MarriottMatrix","prices","Boolean","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b62fa410.chunk.js","sourcesContent":["import React, { useMemo } from \"react\";\nimport { PricePointWithPrice, StayDates } from \"./types\";\nimport \"./AvailableRooms.scss\";\nimport { HTMLTable, Dialog, Classes } from \"@blueprintjs/core\";\nimport moment from \"moment\";\nimport classNames from \"classnames\";\n\ninterface Props {\n  visible: boolean;\n  pricePoints?: PricePointWithPrice[];\n  selectedSquare?: StayDates;\n  onClose: () => void;\n}\n\ninterface HotelPrice {\n  hotelName: string;\n  cheapestRate?: number;\n  corporateRate: boolean;\n  bookingLink?: string;\n}\n\nfunction getRate(price: HotelPrice) {\n  if (price.cheapestRate === null) {\n    return \"No Rate Available\";\n  }\n  return `$${price.cheapestRate} (${\n    price.corporateRate ? \"Corporate Rate\" : \"Regular Rate\"\n  })`;\n}\n\nexport const AvailableRooms: React.FC<Props> = (props: Props) => {\n  const hotels = useMemo(() => {\n    const byName = new Map<string, HotelPrice>();\n    if (props.pricePoints) {\n      props.pricePoints.forEach(pricePoint => {\n        const currentBest = byName.get(pricePoint.hotelName);\n        if (\n          currentBest === undefined ||\n          currentBest.cheapestRate === undefined ||\n          (pricePoint.pricePerNight !== undefined &&\n            pricePoint.pricePerNight < currentBest.cheapestRate)\n        ) {\n          byName.set(pricePoint.hotelName, {\n            hotelName: pricePoint.hotelName,\n            cheapestRate: pricePoint.pricePerNight,\n            corporateRate: pricePoint.corporateRate,\n            bookingLink: pricePoint.bookingLink\n          });\n        }\n      });\n    }\n    return Array.from(byName.values()).sort((a, b) => {\n      if (a.cheapestRate === null || a.cheapestRate === undefined) {\n        return 1;\n      } else if (b.cheapestRate === null || b.cheapestRate === undefined) {\n        return -1;\n      }\n      return a.cheapestRate - b.cheapestRate;\n    });\n  }, [props]);\n\n  return (\n    <Dialog\n      className={classNames(\"available-rooms\", Classes.DARK)}\n      isOpen={props.visible}\n      title={\"Available Rooms\"}\n      onClose={props.onClose}\n    >\n      {renderTitle()}\n      <p>Click on an option to book</p>\n      <div className=\"table-container\">\n        <HTMLTable className=\"table\" interactive>\n          <tbody>\n            {hotels.map(hotel => (\n              <tr key={hotel.hotelName} onClick={openBookingLink(hotel)}>\n                <td>{hotel.hotelName}</td>\n                <td>{getRate(hotel)}</td>\n              </tr>\n            ))}\n          </tbody>\n        </HTMLTable>\n      </div>\n    </Dialog>\n  );\n\n  function renderTitle() {\n    if (!props.selectedSquare) {\n      return null;\n    }\n    const dates = [\n      props.selectedSquare.checkIn,\n      props.selectedSquare.checkOut\n    ].map(d => moment(d).format(\"dddd, MMMM D, YYYY\"));\n\n    return (\n      <h3>\n        {dates[0]}\n        <span className=\"space\" />\n        —\n        <span className=\"space\" />\n        {dates[1]}\n      </h3>\n    );\n  }\n\n  function openBookingLink(hotel: HotelPrice) {\n    return () => {\n      if (hotel.bookingLink) {\n        window.open(hotel.bookingLink, \"_blank\");\n      }\n    };\n  }\n};\n","import moment from \"moment\";\nimport { PricePoint, Hotel, PriceGridData, StayDates } from \"./types\";\nimport { NumberRange } from \"@blueprintjs/core\";\nimport { DateRange } from \"@blueprintjs/datetime\";\n\nexport function formatDate(date: string) {\n  return {\n    dayOfWeek: moment(date).format(\"ddd\"),\n    date: moment(date).format(\"M/D\")\n  };\n}\n\nexport const DEFAULT_HOTELS: string[] = [\n  // \"The Ritz-Carlton Georgetown, Washington, D.C.\",\n  // \"The Westin Georgetown, Washington D.C.\",\n  // \"Washington Marriott Georgetown\",\n  // \"The Ritz-Carlton, Washington, DC\",\n  // \"The Mayflower Hotel, Autograph Collection\",\n  // \"The Westin Georgetown, Washington D.C.\"\n];\n\nexport function datesToKey(stay: StayDates): string {\n  return `${stay.checkIn}-${stay.checkOut}`;\n}\n\nexport function getLast<T>(array: T[]): T {\n  return array[array.length - 1];\n}\n\nexport function getStayLength(stay: StayDates) {\n  return moment(stay.checkOut).diff(moment(stay.checkIn), \"days\");\n}\n\nexport function pricePointIsWithinStayLengthRange(\n  stay: StayDates,\n  stayLengthRange: NumberRange\n) {\n  const length = getStayLength(stay);\n  return length >= stayLengthRange[0] && length <= stayLengthRange[1];\n}\n\nexport function hotelIsWithinDistance(\n  hotel: Hotel,\n  distanceRange: NumberRange\n) {\n  return (\n    hotel.distance >= distanceRange[0] && hotel.distance <= distanceRange[1]\n  );\n}\n\nexport function datesAreChronological(first?: Date, second?: Date): boolean {\n  if (!first || !second) {\n    return true;\n  }\n  return moment(second).diff(moment(first)) >= 0;\n}\n\nexport function dateIsInRange(dateStr: string, range: DateRange) {\n  const date = stringToDate(dateStr);\n  return (\n    datesAreChronological(range[0], date) &&\n    datesAreChronological(date, range[1])\n  );\n}\n\nexport function getPriceFromGrid(\n  grid: PriceGridData | undefined,\n  stay: StayDates\n) {\n  if (grid) {\n    const key = datesToKey(stay);\n    const pricePoint = grid.map.get(key);\n    return pricePoint && pricePoint.pricePerNight;\n  }\n}\n\nexport class PricePointMap<V extends PricePoint> extends Map<string, V[]> {\n  public addPricePoint(key: string, pricePoint: V) {\n    if (this.get(key) === undefined) {\n      super.set(key, []);\n    }\n    const list = super.get(key);\n    if (list === undefined) {\n      throw Error(`No list for key: ${key} in PricePointMap`);\n    }\n    list.push(pricePoint);\n    return this;\n  }\n\n  public set(): this {\n    throw Error(\n      \"Calling set() in a PricePointMap is disallowed. Use addPricePoint instead.\"\n    );\n  }\n}\n\nexport function stringToDate(date: string) {\n  return moment(date).toDate();\n}\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport \"./CheckOutRow.scss\";\nimport { formatDate } from \"./utils\";\n\ninterface Props {\n  checkInDates: string[];\n  checkOut?: string;\n  activeCheckIn?: string;\n  getPrice?: (checkOut: string) => number | undefined;\n  shouldTint?: (checkIn: string) => boolean;\n  onClick?: (checkIn: string) => void;\n  getPricePercentile?: (checkIn: string) => number | undefined;\n  onHover?: (checkIn: string) => void;\n  offHover?: (checkIn: string) => void;\n}\n\nexport const CheckOutRow: React.FC<Props> = (props: Props) => {\n  return (\n    <tr>\n      {props.checkInDates.map(checkIn => {\n        if (props.getPrice && props.checkOut) {\n          const price = props.getPrice && props.getPrice(checkIn);\n          return (\n            <td\n              key={checkIn}\n              onClick={onClickCell(checkIn)}\n              onMouseEnter={() => props.onHover && props.onHover(checkIn)}\n              onMouseLeave={() => props.offHover && props.offHover(checkIn)}\n              className={classNames(\n                {\n                  clickable: price !== undefined,\n                  active: props.activeCheckIn === checkIn,\n                  tint: props.shouldTint && props.shouldTint(checkIn)\n                },\n                checkIn < props.checkOut ? getColorClass(checkIn) : \"impossible\"\n              )}\n            >\n              {price !== undefined && <p>{`$${price}`}</p>}\n            </td>\n          );\n        } else {\n          return (\n            <th\n              key={checkIn}\n              className={classNames(\n                \"checkin-date\",\n                props.shouldTint && props.shouldTint(checkIn) && \"tint\"\n              )}\n            >\n              {renderDate(checkIn)}\n            </th>\n          );\n        }\n      })}\n      {props.checkOut && <th>{renderDate(props.checkOut)}</th>}\n    </tr>\n  );\n\n  function renderDate(dateStr: string) {\n    const { dayOfWeek, date } = formatDate(dateStr);\n    return (\n      <>\n        <p>{dayOfWeek}</p>\n        <p>{date}</p>\n      </>\n    );\n  }\n\n  function onClickCell(checkIn: string) {\n    return () => props.onClick && props.onClick(checkIn);\n  }\n\n  function getColorClass(checkIn: string) {\n    if (!props.getPricePercentile) {\n      return;\n    }\n    const percentile = props.getPricePercentile(checkIn);\n    if (percentile === undefined) {\n      return \"no-price\";\n    }\n    if (percentile >= 0.9) {\n      return \"cost-1\";\n    } else if (percentile > 0.7) {\n      return \"cost-2\";\n    } else if (percentile > 0.3) {\n      return \"cost-3\";\n    } else if (percentile > 0.1) {\n      return \"cost-4\";\n    } else {\n      return \"cost-5\";\n    }\n  }\n};\n","import React, { useState } from \"react\";\nimport {\n  Cell,\n  Column,\n  Table,\n  TableLoadingOption,\n  RenderMode,\n  RowHeaderCell\n} from \"@blueprintjs/table\";\nimport { PriceGridData, StayDates } from \"./types\";\nimport \"./PriceGrid.scss\";\nimport { formatDate, getPriceFromGrid, datesToKey } from \"./utils\";\nimport { HTMLTable } from \"@blueprintjs/core\";\nimport { CheckOutRow } from \"./CheckOutRow\";\nimport { DateRange } from \"@blueprintjs/datetime\";\n\ninterface Props {\n  grid?: PriceGridData;\n  useBlueprintTable: boolean;\n  onSelectSquare: (square: StayDates) => void;\n  dateRange: DateRange;\n}\n\nconst TINT_AFTER_CLICKED = false;\n\nexport const PriceGrid: React.FC<Props> = (props: Props) => {\n  const [selectedSquare, setSelectedSquare] = useState<StayDates | undefined>(\n    undefined\n  );\n  const [hoveredSquare, setHoveredSquare] = useState<StayDates | undefined>(\n    undefined\n  );\n\n  if (props.useBlueprintTable) {\n    return (\n      <Table\n        defaultColumnWidth={85}\n        enableRowResizing={false}\n        enableColumnResizing={false}\n        enableMultipleSelection={false}\n        loadingOptions={\n          !props.grid\n            ? [\n                TableLoadingOption.CELLS,\n                TableLoadingOption.COLUMN_HEADERS,\n                TableLoadingOption.ROW_HEADERS\n              ]\n            : []\n        }\n        renderMode={RenderMode.BATCH}\n        rowHeaderCellRenderer={renderRowHeader}\n        numRows={props.grid ? props.grid.checkInDates.length : 25}\n        defaultRowHeight={25}\n      >\n        {renderColumns()}\n      </Table>\n    );\n  } else {\n    if (!props.grid) {\n      return null;\n    }\n    return (\n      <div className=\"grid\">\n        <div>\n          <p>\n            <i>Check in:</i>\n          </p>\n          <HTMLTable bordered condensed className=\"table-header\">\n            <thead>\n              <CheckOutRow checkInDates={props.grid.checkInDates} />\n            </thead>\n          </HTMLTable>\n          <div className=\"table-container\">\n            <HTMLTable bordered condensed className=\"html-table\">\n              <tbody>{props.grid.checkOutDates.map(renderRow)}</tbody>\n            </HTMLTable>\n          </div>\n        </div>\n        <i className=\"checkout-text\">Check out:</i>\n      </div>\n    );\n  }\n\n  function renderRow(checkOut: string) {\n    if (!props.grid) {\n      return null;\n    }\n    return (\n      <CheckOutRow\n        key={checkOut}\n        checkOut={checkOut}\n        checkInDates={props.grid.checkInDates}\n        getPrice={getPrice(checkOut)}\n        onClick={onSelectSquare(checkOut)}\n        activeCheckIn={getActiveCheckIn(checkOut)}\n        getPricePercentile={getPricePercentile(checkOut)}\n        shouldTint={shouldTintSquare(checkOut)}\n        onHover={onHoverSquare(checkOut)}\n        offHover={onUnhoverSquare()}\n      />\n    );\n  }\n\n  function renderRowHeader(rowIndex: number) {\n    if (props.grid) {\n      return (\n        <RowHeaderCell className=\"row-header\">\n          {formatDate(props.grid.checkInDates[rowIndex]).date}\n        </RowHeaderCell>\n      );\n    }\n    return <RowHeaderCell>{rowIndex}</RowHeaderCell>;\n  }\n\n  function renderColumns() {\n    if (!props.grid) {\n      return <Column />;\n    }\n    return props.grid.checkOutDates.map(checkOut => {\n      return (\n        <Column\n          key={checkOut}\n          name={formatDate(checkOut).date}\n          cellRenderer={cellRenderer(checkOut)}\n        />\n      );\n    });\n  }\n\n  function cellRenderer(checkOut: string) {\n    return (rowIndex: number) => {\n      let priceStr = \"\";\n      if (props.grid) {\n        const checkIn = props.grid.checkInDates[rowIndex];\n        const price = getPriceFromGrid(props.grid, { checkIn, checkOut });\n        if (price !== undefined) {\n          priceStr = `$${price.toLocaleString()}`;\n        }\n      }\n      return <Cell>{priceStr}</Cell>;\n    };\n  }\n\n  function getPrice(checkOut: string) {\n    return (checkIn: string) => {\n      return getPriceFromGrid(props.grid, { checkIn, checkOut });\n    };\n  }\n\n  function onSelectSquare(checkOut: string) {\n    return (checkIn: string) => {\n      if (getPriceFromGrid(props.grid, { checkIn, checkOut }) === undefined) {\n        return;\n      }\n      setSelectedSquare({ checkIn, checkOut });\n      props.onSelectSquare && props.onSelectSquare({ checkIn, checkOut });\n    };\n  }\n\n  function onHoverSquare(checkOut: string) {\n    return (checkIn: string) => setHoveredSquare({ checkIn, checkOut });\n  }\n\n  function onUnhoverSquare() {\n    return () => setHoveredSquare(undefined);\n  }\n\n  function stayOverlaps(selected: StayDates, overlapper: StayDates) {\n    if (selected.checkIn === overlapper.checkIn) {\n      return selected.checkOut >= overlapper.checkOut;\n    }\n    if (selected.checkOut === overlapper.checkOut) {\n      return selected.checkIn <= overlapper.checkIn;\n    }\n    return false;\n  }\n\n  function shouldTintSquare(checkOut: string) {\n    return (checkIn: string): boolean => {\n      const overlapsSelected =\n        selectedSquare && stayOverlaps(selectedSquare, { checkIn, checkOut });\n      const overlapsHovered =\n        hoveredSquare && stayOverlaps(hoveredSquare, { checkIn, checkOut });\n\n      return overlapsHovered || (TINT_AFTER_CLICKED && overlapsSelected);\n    };\n  }\n\n  function getActiveCheckIn(checkOut: string) {\n    if (!TINT_AFTER_CLICKED) {\n      return;\n    }\n    if (!selectedSquare) {\n      return;\n    }\n    if (checkOut === selectedSquare.checkOut) {\n      return selectedSquare.checkIn;\n    }\n  }\n\n  function getPricePercentile(checkOut: string) {\n    return (checkIn: string): number | undefined => {\n      if (!props.grid) {\n        return;\n      }\n      const thisSquare = props.grid.map.get(datesToKey({ checkIn, checkOut }));\n      if (thisSquare !== undefined) {\n        return (thisSquare.rank - 1) / (props.grid.map.size - 1);\n      }\n    };\n  }\n};\n","import { List as ImmutableList } from \"immutable\";\nimport {\n  PriceGridData,\n  Hotel,\n  PricePoint,\n  PricePointWithPrice,\n  StayDates\n} from \"./types\";\n\nexport interface MatrixState {\n  pricePoints: {\n    byDates?: Map<string, PricePointWithPrice[]>;\n    byHotel: Map<string, PricePoint[]>;\n  };\n  grid?: PriceGridData;\n  hotels: ImmutableList<Hotel>;\n  selectedSquare?: StayDates;\n}\n\nexport interface LoadPricesAction {\n  type: \"LOAD_PRICES\";\n  grid: PriceGridData;\n  pricePointsByDates: Map<string, PricePointWithPrice[]>;\n}\n\nexport interface ToggleHotelSelection {\n  type: \"TOGGLE_HOTEL_SELECTION\";\n  hotel: Hotel;\n}\nexport interface SelectSquareAction {\n  type: \"SELECT_SQUARE\";\n  square: StayDates;\n}\n\nexport type Action =\n  | LoadPricesAction\n  | SelectSquareAction\n  | ToggleHotelSelection;\n\nexport function matrixReducer(state: MatrixState, action: Action): MatrixState {\n  switch (action.type) {\n    case \"LOAD_PRICES\":\n      return {\n        ...state,\n        grid: action.grid,\n        pricePoints: {\n          ...state.pricePoints,\n          byDates: action.pricePointsByDates\n        }\n      };\n    case \"SELECT_SQUARE\":\n      return {\n        ...state,\n        selectedSquare: action.square\n      };\n    case \"TOGGLE_HOTEL_SELECTION\":\n      return {\n        ...state,\n        hotels: state.hotels.map(hotel => ({\n          ...hotel,\n          selected:\n            hotel.name === action.hotel.name ? !hotel.selected : hotel.selected\n        }))\n      };\n  }\n}\n","import React, { useState } from \"react\";\nimport { NumberRange, RangeSlider, IRangeSliderProps } from \"@blueprintjs/core\";\nimport \"./Slider.scss\";\n\ninterface Props extends IRangeSliderProps {\n  value: NumberRange;\n  labelSuffix?: string;\n}\n\nexport const Slider: React.FC<Props> = (props: Props) => {\n  const [localValue, setLocalValue] = useState<NumberRange>(props.value);\n  const { value, labelSuffix, ...spreadableProps } = props;\n  return (\n    <div>\n      <RangeSlider\n        className=\"slider\"\n        labelRenderer={label => (\n          <span className=\"no-wrap\">\n            {label.toLocaleString() + (labelSuffix || \"\")}\n          </span>\n        )}\n        labelStepSize={1}\n        stepSize={0.1}\n        {...spreadableProps}\n        value={localValue}\n        onChange={onChange}\n        onRelease={onRelease}\n      />\n    </div>\n  );\n\n  function onRelease(value: NumberRange) {\n    setLocalValue(value);\n    props.onRelease && props.onRelease(value);\n  }\n\n  function onChange(value: NumberRange) {\n    setLocalValue(value);\n    props.onChange && props.onChange(value);\n  }\n};\n","import React, { Fragment } from \"react\";\nimport { Hotel, Bucket } from \"./types\";\nimport { Slider } from \"./Slider\";\nimport { Tooltip, Checkbox, NumberRange } from \"@blueprintjs/core\";\nimport { DateRangeInput, DateRange } from \"@blueprintjs/datetime\";\nimport { stringToDate, hotelIsWithinDistance } from \"./utils\";\nimport \"./Filters.scss\";\n\ninterface Props {\n  bucketedHotels: Bucket<Hotel>[];\n  onChangeDateRange: (newRange: DateRange) => void;\n  onChangeDistanceRange: (newRange: NumberRange) => void;\n  onChangeStayLengthRange: (newRange: NumberRange) => void;\n  onChangeHotelSelection: (hotel: Hotel) => void;\n\n  selectedDistanceRange: NumberRange;\n  maxDistance: number;\n\n  selectedStayLengthRange: NumberRange;\n  maxStayLength: number;\n\n  dateRange: DateRange;\n}\n\nexport const Filters: React.FC<Props> = (props: Props) => {\n  return (\n    <div className=\"filters\">\n      <h3>Filters</h3>\n      <p>Distance from Georgetown</p>\n      <Slider\n        min={0}\n        max={props.maxDistance}\n        value={props.selectedDistanceRange}\n        onRelease={props.onChangeDistanceRange}\n        labelStepSize={5}\n        labelSuffix=\"mi\"\n      />\n      <p className=\"stay-length\">Stay Length</p>\n      <Slider\n        value={props.selectedStayLengthRange}\n        min={1}\n        max={props.maxStayLength}\n        stepSize={1}\n        labelStepSize={2}\n        labelSuffix=\" days\"\n        onRelease={props.onChangeStayLengthRange}\n      />\n      <div className=\"date-range-container\">\n        <DateRangeInput\n          className=\"date-range\"\n          shortcuts={false}\n          formatDate={date => date.toDateString()}\n          parseDate={stringToDate}\n          minDate={props.dateRange[0]}\n          maxDate={props.dateRange[1]}\n          onChange={props.onChangeDateRange}\n        />\n      </div>\n      <div className=\"hotels\">\n        {props.bucketedHotels.map(bucket => (\n          <Fragment key={`${bucket.ceiling}`}>\n            <h4>{`Under ${bucket.ceiling} ${\n              bucket.ceiling === 1 ? \"mile\" : \"miles\"\n            } away`}</h4>\n            {bucket.items.map(hotel => {\n              const outOfRange = !hotelIsWithinDistance(\n                hotel,\n                props.selectedDistanceRange\n              );\n              return (\n                <div key={hotel.name}>\n                  <Tooltip\n                    content=\"Hotel is not in the selected distance range\"\n                    disabled={!outOfRange}\n                  >\n                    <Checkbox\n                      checked={hotel.selected && !outOfRange}\n                      disabled={outOfRange}\n                      onChange={() => props.onChangeHotelSelection(hotel)}\n                      key={hotel.name}\n                      label={hotel.name}\n                    />\n                  </Tooltip>\n                </div>\n              );\n            })}\n          </Fragment>\n        ))}\n      </div>\n    </div>\n  );\n};\n","import { Classes, NumberRange } from \"@blueprintjs/core\";\nimport { List as ImmutableList } from \"immutable\";\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useReducer,\n  useState\n} from \"react\";\nimport { AvailableRooms } from \"./AvailableRooms\";\nimport { PriceGrid } from \"./PriceGrid\";\nimport \"./MarriottMatrix.scss\";\nimport { matrixReducer, MatrixState } from \"./matrixReducer\";\nimport {\n  Bucket,\n  Hotel,\n  PriceGridMap,\n  PricePoint,\n  PricePointWithPrice,\n  StayDates\n} from \"./types\";\nimport {\n  datesToKey,\n  DEFAULT_HOTELS,\n  getLast,\n  hotelIsWithinDistance,\n  dateIsInRange,\n  PricePointMap,\n  pricePointIsWithinStayLengthRange,\n  getStayLength,\n  stringToDate\n} from \"./utils\";\nimport { Filters } from \"./Filters\";\nimport { DateRange } from \"@blueprintjs/datetime\";\nimport classNames from \"classnames\";\n\nfunction sortDates(dates: Set<string>): string[] {\n  return Array.from(dates).sort();\n}\n\ninterface Props {\n  pricePoints: PricePoint[];\n}\n\nfunction createInitialState(props: Props): MatrixState {\n  const hotelToPricePoints = new PricePointMap();\n  const selectedHotelNames = new Set<string>();\n  const hotels: Hotel[] = [];\n  props.pricePoints.forEach(pricePoint => {\n    const name = pricePoint.hotelName;\n\n    hotelToPricePoints.addPricePoint(name, pricePoint);\n\n    if (!selectedHotelNames.has(name)) {\n      selectedHotelNames.add(name);\n      hotels.push({\n        name: name,\n        distance: pricePoint.distance,\n        selected: DEFAULT_HOTELS.includes(name)\n      });\n    }\n  });\n\n  hotels.sort((a, b) => a.distance - b.distance);\n\n  return {\n    pricePoints: {\n      byHotel: hotelToPricePoints\n    },\n    hotels: ImmutableList(hotels)\n  };\n}\n\nexport const MarriottMatrix: React.FC<Props> = (props: Props) => {\n  const [viewingAvailableRooms, setViewingAvailableRooms] = useState(false);\n\n  const [state, dispatch] = useReducer(\n    matrixReducer,\n    createInitialState(props)\n  );\n\n  const [bucketedHotels, nameToHotel, anyHotelsSelected] = useMemo(() => {\n    const hotels = state.hotels;\n    const buckets: Bucket<Hotel>[] = [];\n    const nameToHotel = new Map<string, Hotel>();\n    let anyHotelsSelected = false;\n\n    hotels.forEach(hotel => {\n      nameToHotel.set(hotel.name, hotel);\n      anyHotelsSelected = anyHotelsSelected || hotel.selected;\n      if (\n        buckets.length === 0 ||\n        hotel.distance > buckets[buckets.length - 1].ceiling\n      ) {\n        buckets.push({\n          ceiling: Math.ceil(hotel.distance),\n          items: [hotel]\n        });\n      } else {\n        getLast(buckets).items.push(hotel);\n      }\n    });\n\n    return [buckets, nameToHotel, anyHotelsSelected];\n  }, [state.hotels]);\n\n  const onSelectSquare = useCallback(\n    (square: StayDates) => {\n      setViewingAvailableRooms(true);\n      dispatch({\n        type: \"SELECT_SQUARE\",\n        square\n      });\n    },\n    [setViewingAvailableRooms, dispatch]\n  );\n\n  const [minDate, maxDate, maxStayLength] = useMemo(() => {\n    let minDate = props.pricePoints[0].stayDates.checkIn;\n    let maxDate = props.pricePoints[0].stayDates.checkOut;\n    let maxStayLength = 1;\n    props.pricePoints.forEach(pricePoint => {\n      const { checkIn, checkOut } = pricePoint.stayDates;\n      if (checkIn < minDate) {\n        minDate = checkIn;\n      }\n      if (checkOut > maxDate) {\n        maxDate = checkOut;\n      }\n\n      const stayLength = getStayLength(pricePoint.stayDates);\n      maxStayLength = Math.max(stayLength, maxStayLength);\n    });\n    return [minDate, maxDate, maxStayLength];\n  }, [props.pricePoints]);\n\n  const maxDistance = useMemo(\n    () => state.hotels.last({ distance: 5 }).distance,\n    [state.hotels]\n  );\n\n  const [distanceRange, setDistanceRange] = useState<NumberRange>([\n    0,\n    maxDistance\n  ]);\n  const [dateRange, setDateRange] = useState<DateRange>([\n    stringToDate(minDate),\n    stringToDate(maxDate)\n  ]);\n  const [stayLengthRange, setStayLengthRange] = useState<NumberRange>([\n    1,\n    maxStayLength\n  ]);\n\n  useEffect(() => {\n    const datesToPricePoints = new PricePointMap<PricePointWithPrice>();\n    const priceGridMap = new Map<string, PricePointWithPrice>();\n    const checkInDates = new Set<string>();\n    const checkOutDates = new Set<string>();\n\n    function addPricePointToGrid(pricePoint: PricePoint) {\n      const {\n        hotelName,\n        pricePerNight,\n        soldOut,\n        stayDates: { checkIn, checkOut }\n      } = pricePoint;\n\n      for (const date of [checkIn, checkOut]) {\n        if (!dateIsInRange(date, dateRange)) {\n          return;\n        }\n      }\n\n      checkInDates.add(checkIn);\n      checkOutDates.add(checkOut);\n\n      const hotel = nameToHotel.get(hotelName);\n      if (\n        !hotel ||\n        (anyHotelsSelected && !hotel.selected) ||\n        !hotelIsWithinDistance(hotel, distanceRange) ||\n        !pricePointIsWithinStayLengthRange(\n          pricePoint.stayDates,\n          stayLengthRange\n        )\n      ) {\n        return;\n      }\n\n      if (pricePerNight === null || pricePerNight === undefined || soldOut) {\n        return;\n      }\n\n      const pricePointWithPrice = {\n        ...pricePoint,\n        pricePerNight\n      };\n      const datesString = datesToKey({ checkIn, checkOut });\n      const bestPriceForStay = priceGridMap.get(datesString);\n      if (!bestPriceForStay || pricePerNight < bestPriceForStay.pricePerNight) {\n        priceGridMap.set(datesString, pricePointWithPrice);\n      }\n      datesToPricePoints.addPricePoint(datesString, pricePointWithPrice);\n    }\n\n    if (anyHotelsSelected) {\n      for (const [\n        hotelName,\n        pricePoints\n      ] of state.pricePoints.byHotel.entries()) {\n        const hotelForPricePoint = nameToHotel.get(hotelName);\n        if (\n          hotelForPricePoint &&\n          hotelForPricePoint.selected &&\n          hotelIsWithinDistance(hotelForPricePoint, distanceRange)\n        ) {\n          pricePoints.forEach(pricePoint => {\n            if (\n              pricePointIsWithinStayLengthRange(\n                pricePoint.stayDates,\n                stayLengthRange\n              )\n            ) {\n              addPricePointToGrid(pricePoint);\n            }\n          });\n        }\n      }\n    } else {\n      props.pricePoints.forEach(addPricePointToGrid);\n    }\n\n    // add ranks\n    const sortedPrices = [...priceGridMap.entries()].sort(\n      ([_, a], [__, b]) => a.pricePerNight - b.pricePerNight\n    );\n    const mapWithRanks: PriceGridMap = new Map();\n    sortedPrices.forEach(([dateString, _], i) => {\n      const pricePoint = priceGridMap.get(dateString);\n      if (pricePoint) {\n        mapWithRanks.set(dateString, {\n          ...pricePoint,\n          rank: i + 1\n        });\n      }\n    });\n\n    dispatch({\n      type: \"LOAD_PRICES\",\n      pricePointsByDates: datesToPricePoints,\n      grid: {\n        map: mapWithRanks,\n        checkInDates: sortDates(checkInDates),\n        checkOutDates: sortDates(checkOutDates)\n      }\n    });\n  }, [\n    props.pricePoints,\n    state.hotels,\n    dateRange,\n    distanceRange,\n    stayLengthRange,\n    anyHotelsSelected,\n    nameToHotel,\n    state.pricePoints.byHotel\n  ]);\n\n  return (\n    <div className={classNames(\"container\", Classes.DARK)}>\n      <div className=\"sidebar\">{renderFilters()}</div>\n      <div className=\"content\">\n        <h2>Marriott Matrix</h2>\n        {renderTable()}\n        <AvailableRooms\n          selectedSquare={state.selectedSquare}\n          pricePoints={getPricePointsForStay(state.selectedSquare)}\n          visible={viewingAvailableRooms}\n          onClose={() => setViewingAvailableRooms(false)}\n        />\n      </div>\n    </div>\n  );\n\n  function renderTable() {\n    if (!state.grid) {\n      return null;\n    }\n    return (\n      <PriceGrid\n        grid={state.grid}\n        dateRange={dateRange}\n        useBlueprintTable={false}\n        onSelectSquare={onSelectSquare}\n      />\n    );\n  }\n\n  function renderFilters() {\n    if (!state.grid) {\n      return null;\n    }\n    return (\n      <Filters\n        dateRange={[stringToDate(minDate), stringToDate(maxDate)]}\n        onChangeDateRange={setDateRange}\n        maxDistance={maxDistance}\n        selectedDistanceRange={distanceRange}\n        onChangeDistanceRange={setDistanceRange}\n        maxStayLength={maxStayLength}\n        selectedStayLengthRange={stayLengthRange}\n        onChangeStayLengthRange={setStayLengthRange}\n        bucketedHotels={bucketedHotels}\n        onChangeHotelSelection={hotel => {\n          dispatch({\n            type: \"TOGGLE_HOTEL_SELECTION\",\n            hotel\n          });\n        }}\n      />\n    );\n  }\n\n  function getPricePointsForStay(\n    stay?: StayDates\n  ): PricePointWithPrice[] | undefined {\n    if (!state.grid || !stay || !state.pricePoints.byDates) {\n      return [];\n    }\n    return state.pricePoints.byDates.get(datesToKey(stay));\n  }\n};\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { MarriottMatrix } from \"./MarriottMatrix\";\nimport prices from \"./prices.json\";\nimport { ScrapedPricePoint, PricePoint } from \"./types\";\nimport moment from \"moment\";\n\nfunction useWindowWidth() {\n  const [width, setWidth] = useState(window.innerWidth);\n\n  useEffect(() => {\n    const handleResize = () => setWidth(window.innerWidth);\n    window.addEventListener(\"resize\", handleResize);\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  });\n\n  return width;\n}\n\nfunction processScrapedPricePoint(pricePoint: ScrapedPricePoint): PricePoint {\n  const [checkIn, checkOut] = pricePoint.dates;\n\n  // TODO: url generation should be on backend\n  let bookingLink: string | undefined = undefined;\n  if (pricePoint.booking_link) {\n    const propertyCodeMatch = pricePoint.booking_link.match(\n      /propertyCode=([A-Z]+)&/\n    );\n    if (propertyCodeMatch === null) {\n      throw Error(\n        \"No property code match in booking link: \" + pricePoint.booking_link\n      );\n    }\n    const propertyCode = propertyCodeMatch[1];\n\n    bookingLink =\n      \"https://www.marriott.com/reservation/availabilitySearch.mi?&propertyCode=\" +\n      propertyCode +\n      \"&fromDate=\" +\n      moment(checkIn).format(\"MM/DD/YYYY\") +\n      \"&toDate=\" +\n      moment(checkOut).format(\"MM/DD/YYYY\") +\n      \"&numberOfRooms=1&numberOfGuests=1&currency=USD\";\n\n    if (pricePoint.corporate_rate) {\n      bookingLink += \"&clusterCode=corp&corporateCode=P5R\";\n    }\n  }\n\n  return {\n    hotelName: pricePoint.name,\n    stayDates: { checkIn, checkOut },\n    corporateRate: pricePoint.corporate_rate,\n    pricePerNight: pricePoint.price_per_night,\n    soldOut: pricePoint.sold_out,\n    distance: pricePoint.distance,\n    bookingLink\n  };\n}\n\nconst App: React.FC = () => {\n  const width = useWindowWidth();\n  if (width < 1000) {\n    return <p className=\"too-small\">Desktop only :-)</p>;\n  }\n  return <MarriottMatrix pricePoints={prices.map(processScrapedPricePoint)} />;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}